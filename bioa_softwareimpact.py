# -*- coding: utf-8 -*-
"""BIOA_SoftwareImpact.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/19a52e0ivE5OsnyhNsltUKnSbkpp48yYj
"""

import numpy as np
import matplotlib.pyplot as plt

# --- Problem: Simple Traveling Salesman Problem (TSP) with 10 cities ---

# Generate random coordinates for 10 cities
num_cities = 10
cities = np.random.rand(num_cities, 2) * 100  # Coordinates in 100x100 grid

def tsp_distance(tour):
    # Calculate the total distance of the tour
    dist = 0
    for i in range(num_cities):
        dist += np.linalg.norm(cities[tour[i]] - cities[tour[(i+1) % num_cities]])
    return dist

class BIOA_TSP:
    def __init__(self, num_agents=20, max_iterations=300):
        self.num_agents = num_agents
        self.max_iterations = max_iterations
        self.agents = [np.random.permutation(num_cities) for _ in range(num_agents)]
        self.fitness = np.array([tsp_distance(agent) for agent in self.agents])
        self.best_solution = self.agents[np.argmin(self.fitness)]
        self.best_fitness = np.min(self.fitness)
        self.history = []

    def optimize(self):
        for iteration in range(self.max_iterations):
            # --- Exploration Phase (random swap) ---
            for i in range(self.num_agents):
                new_tour = self.agents[i].copy()
                idx1, idx2 = np.random.choice(num_cities, 2, replace=False)
                new_tour[idx1], new_tour[idx2] = new_tour[idx2], new_tour[idx1]
                new_fitness = tsp_distance(new_tour)
                if new_fitness < self.fitness[i]:
                    self.agents[i] = new_tour
                    self.fitness[i] = new_fitness
                    if new_fitness < self.best_fitness:
                        self.best_solution = new_tour
                        self.best_fitness = new_fitness

            # --- Exploitation Phase (move towards best solution) ---
            for i in range(self.num_agents):
                new_tour = self.agents[i].copy()
                for _ in range(2):  # Two changes towards the best tour
                    idx = np.random.randint(num_cities)
                    target_idx = np.where(self.best_solution == new_tour[idx])[0][0]
                    new_tour[idx], new_tour[target_idx] = new_tour[target_idx], new_tour[idx]
                new_fitness = tsp_distance(new_tour)
                if new_fitness < self.fitness[i]:
                    self.agents[i] = new_tour
                    self.fitness[i] = new_fitness
                    if new_fitness < self.best_fitness:
                        self.best_solution = new_tour
                        self.best_fitness = new_fitness

            # --- Adaptation Phase ---
            for i in range(self.num_agents):
                if np.random.rand() < 0.1:
                    self.agents[i] = np.random.permutation(num_cities)
                    self.fitness[i] = tsp_distance(self.agents[i])
                    if self.fitness[i] < self.best_fitness:
                        self.best_solution = self.agents[i]
                        self.best_fitness = self.fitness[i]

            self.history.append(self.best_fitness)

            if iteration % 50 == 0 or iteration == self.max_iterations - 1:
                print(f"Iteration {iteration} - Best Distance: {self.best_fitness:.2f}")

        return self.best_solution, self.best_fitness

# --- Run BIOA on TSP ---
optimizer = BIOA_TSP(num_agents=20, max_iterations=300)
best_tour, best_distance = optimizer.optimize()

print("\nOptimization Complete!")
print(f"Best Tour Distance: {best_distance:.2f}")

# --- Plot Results ---
plt.figure(figsize=(6, 6))
for i in range(num_cities):
    city_a = cities[best_tour[i]]
    city_b = cities[best_tour[(i+1) % num_cities]]
    plt.plot([city_a[0], city_b[0]], [city_a[1], city_b[1]], 'bo-')
plt.scatter(cities[:, 0], cities[:, 1], color='red', label='Cities')
plt.title("BIOA-Optimized TSP Tour")
plt.legend()
plt.grid(True)
plt.show()

# --- Convergence Plot ---
plt.figure(figsize=(8, 4))
plt.plot(optimizer.history)
plt.xlabel("Iterations")
plt.ylabel("Best Tour Distance")
plt.title("Convergence of BIOA on TSP")
plt.grid(True)
plt.show()